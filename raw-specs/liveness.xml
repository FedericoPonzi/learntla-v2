<root folder="liveness">
<spec name="orchestrator" num="4">
---- MODULE $name ----
EXTENDS Integers, TLC, FiniteSets

Servers == {"s1", "s2"}

(*--algorithm threads
variables 
  online = Servers;

<s on="2-">define
  Invariant == \E s \in Servers: s \in online
  Safety == \E s \in Servers: [](s \in online)<s on="3-">
  \* It's ot the case that all servers are always online
  Liveness == ~[](online = Servers)</s>
end define;</s>

<s on="4">fair </s>process orchestrator = "orchestrator"
begin
  Change:
    while TRUE do
      with s \in Servers do
       either
          await s \notin online;
          online := online \cup {s};
        or
          await s \in online;
          await Cardinality(online) > 1;
          online := online \ {s};
        end either;
      end with;
    end while;
end process;

end algorithm; *)
====
</spec>

<spec name="threads_liveness" num="4">
---- MODULE $name ----
EXTENDS TLC, Sequences, Integers
CONSTANT NULL

NumThreads == 2
Threads == 1..NumThreads

(* --algorithm threads

variables 
  counter = <s on="1-2">0</s><s on="3-4">1</s>;
  lock = NULL;

define
  Liveness ==
    &lt;><s on="4">[]</s>(counter = NumThreads)
end define;  

<s on="2-">fair </s>process thread \in Threads
variables tmp = 0;
begin
  GetLock:
    await lock = NULL;
    lock := self;

  GetCounter:
    tmp := counter;

  IncCounter:
    counter := tmp + 1;
  
  ReleaseLock:
    lock := NULL; 
end process;
end algorithm; *)
====
</spec>
</root>
