<?xml version="1.0"?>
<root folder="duplicates">
<spec name="duplicates_1" num="3">
---- MODULE $name ----
EXTENDS Integers, Sequences, TLC

<s on="3">S == 1..10

</s>(*--algorithm dup
variable seq <s on="1">=</s><s on="2-">\in</s> <s on="2">{</s><s on="1-2">&lt;&lt;1, 2, 3, 2>></s><s on="2">, &lt;&lt;1, 2, 3, 4>>}</s><s on="3">S \X S \X S \X S</s>;
index = 1;
seen = {};
is_unique = TRUE;
begin
  Iterate:
    while index &lt;= Len(seq) do
      if seq[index] \notin seen then
        seen := seen \union {seq[index]};
      else
        is_unique := FALSE;
      end if;
      index := index + 1;
    end while;
end algorithm; *)
====
</spec>

<spec name="duplicates_2" num="4">
---- MODULE $name ----
EXTENDS Integers, Sequences, TLC<s on="2-">, FiniteSets</s>

S == 1..10

(*--algorithm dup
variable seq \in S \X S \X S \X S;
index = 1;
seen = {};
is_unique = TRUE;

define
  TypeInvariant ==
    /\ is_unique \in BOOLEAN
    /\ seen \subseteq S
    /\ index \in 1..Len(seq)+1
    <s on="2-">
  IsUnique(s) == </s><s on="2">Cardinality(seen) = Len(s)</s><s on="3-">
    \A i, j \in 1..Len(s): </s>
      <s on="4">i # j => </s><s on="3-">seq[i] # seq[j]</s><s on="2-"> 

  IsCorrect == pc = "Done" => is_unique = IsUnique(seq)</s>
end define; 

begin
  Iterate:
    while index &lt;= Len(seq) do
      if seq[index] \notin seen then
        seen := seen \union {seq[index]};
      else
        is_unique := FALSE;
      end if;
      index := index + 1;
    end while;
end algorithm; *)
====
</spec>
<spec name="duplicates_fs" num="2">
---- MODULE $name ----
EXTENDS Integers, Sequences, TLC

(*--algorithm dup
variable <s on="2">n \in 1..7;
</s>seq \in [1..<s on="1">7</s><s on="2">n</s> -> 1..10];
i = 1;
seen = {};
is_unique = TRUE;

define
  TypeInvariant ==
    /\ is_unique \in BOOLEAN
    /\ seen \subseteq S
    /\ i \in 1..Len(seq)+1
    
  IsUnique(s) == 
    \A i, j \in 1..Len(s)
      i # j => seq[i] # seq[j] 

  IsCorrect == pc = "Done" => is_unique = IsUnique(seq)
end define; 

begin
  Iterate:
    while i &lt;= Len(seq) do
      if seq[i] \notin seen then
        seen := seen \union {seq[i]};
      else
        is_unique := FALSE;
      end if;
    end while;
end algorithm; *)
====
</spec>
</root>
